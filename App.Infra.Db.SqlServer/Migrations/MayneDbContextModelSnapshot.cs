// <auto-generated />
using App.Infra.Db.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Db.SqlServer.Migrations
{
    [DbContext(typeof(MayneDbContext))]
    partial class MayneDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Mayne.Base.Entities.Base", b =>
                {
                    b.Property<int>("BaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseId"));

                    b.Property<string>("BaseAdrress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaseNumber")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("BaseId");

                    b.HasIndex("CityId");

                    b.ToTable("Bases");
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.Cars.Entities.Car", b =>
                {
                    b.Property<string>("PlateNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BaseId")
                        .HasColumnType("int");

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarOwnerID")
                        .HasColumnType("int");

                    b.HasKey("PlateNumber");

                    b.HasIndex("BaseId");

                    b.HasIndex("CarId");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.City.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.User.Entities.Operator", b =>
                {
                    b.Property<int>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatorId"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatorId");

                    b.ToTable("Operators", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.User.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalCode")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.User.Entities.Costomer", b =>
                {
                    b.HasBaseType("App.Domain.Core.Mayne.User.Entities.User");

                    b.ToTable("Costomers", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.Base.Entities.Base", b =>
                {
                    b.HasOne("App.Domain.Core.Mayne.City.Entities.City", "City")
                        .WithMany("Bases")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.Cars.Entities.Car", b =>
                {
                    b.HasOne("App.Domain.Core.Mayne.Base.Entities.Base", "ResevedBase")
                        .WithMany("Cars")
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Mayne.User.Entities.Costomer", "CarOwner")
                        .WithMany("CostomerCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarOwner");

                    b.Navigation("ResevedBase");
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.User.Entities.Costomer", b =>
                {
                    b.HasOne("App.Domain.Core.Mayne.User.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("App.Domain.Core.Mayne.User.Entities.Costomer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.Base.Entities.Base", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.City.Entities.City", b =>
                {
                    b.Navigation("Bases");
                });

            modelBuilder.Entity("App.Domain.Core.Mayne.User.Entities.Costomer", b =>
                {
                    b.Navigation("CostomerCars");
                });
#pragma warning restore 612, 618
        }
    }
}
